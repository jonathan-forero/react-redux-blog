{"version":3,"sources":["components/Menu/Menu.js","actions/users/types.js","actions/users/usersActions.js","components/Spinner/Spinner.js","components/Error/Error.js","components/Table/Table.js","components/Table/index.js","components/Users/Users.js","components/Users/index.js","components/Comments/Comments.js","components/Comments/index.js","components/Posts/Posts.js","actions/posts/types.js","components/Posts/index.js","actions/posts/postsActions.js","components/Tasks/Tasks.js","components/Tasks/Save.js","actions/tasks/tasksAction.js","actions/tasks/types.js","components/Tasks/index.js","components/App.js","reducers/usersReducer.js","reducers/postsReducer.js","reducers/tasksReducers.js","reducers/index.js","index.js"],"names":["Menu","id","to","GET_ALL","ERROR","getAll","dispatch","a","type","axios","get","response","ActionType","payload","data","message","Spinner","className","Error","props","Table","users","map","user","key","name","email","website","TableConnect","connect","reducers","usersReducer","Users","setContent","error","loading","this","length","React","Component","UsersConnect","usersActions","Comments","errorComments","loadingComments","comments","comment","body","CommentsConnect","postsReducer","Posts","setUser","match","params","setPosts","posts","showInfo","posts_key","post_key","post","com_key","onClick","showComments","title","open","openClose","getComments","getAllUsers","getPostsByUser","UPDATE","dispatchToProps","getState","user_id","news","updated_posts","PostsTypes","updated_users","UsuariosTypes","selected","updated","PostsConnect","Tasks","showContent","tasks","Object","keys","userId","setTasks","changeChekbox","deleteTask","byUser","taskId","defaultChecked","completed","onChange","class","Save","componentDidMount","changeUserId","changeTitle","cleanForm","task","event","target","value","save","saveTask","editTask","newTask","disable","showAction","goBack","disabled","editedTask","put","tasksReducer","updatedTasks","delete","mapStateToProps","TasksConnect","tasksActions","SaveConnect","App","exact","path","component","INITIAL_STATE","combineReducers","state","action","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d739b521.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst Menu = () => (\n    <nav id=\"menu\">\n        <Link to=\"/react-redux-blog/users\">Users</Link>\n        <Link to=\"/react-redux-blog/tasks\">Tasks</Link>\n    </nav>\n);\n\nexport default Menu;\n","export const GET_ALL = 'USERS_GET_ALL';\nexport const LOADING = 'USERS_LOADING';\nexport const ERROR = 'USERS_ERROR';\n","import axios from 'axios';\nimport * as ActionType from '../users/types';\n\nexport const getAll = () => async (dispatch) => {\n    dispatch({\n        type: ActionType.LOADING\n    });\n    try {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users');\n        dispatch({\n            type: ActionType.GET_ALL,\n            payload: response.data\n        });\n    } catch (error) {\n        dispatch({\n            type: ActionType.ERROR,\n            payload: error.message + ' - User info not available'\n        });\n    }\n}\n","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner-container\">\n      <div className=\"lds-spinner\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\n\nconst Error = (props) => {\n  return (\n    <div className=\"text-center\">\n      <h2 className=\"red\">\n        Something went wrong, please try later.\n      </h2>\n      {props.message}\n    </div>\n  );\n};\n\nexport default Error;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Table = (props) => {\n\n  const setRows = () => (\n    props.users.map((user, key) => (\n      <tr key={ user.id }>\n        <td>\n          { user.name }\n        </td>\n        <td>\n          { user.email }\n        </td>\n        <td>\n          { user.website }\n        </td>\n        <td>\n          <Link to={ `/react-redux-blog/posts/${key}` }>\n            <div className=\"eye-solid icon\"></div>\n          </Link>\n        </td>\n      </tr>\n    ))\n  );\n\n  return (\n    <>\n      <table className=\"table\">\n          <thead>\n            <tr>\n              <th>\n                Name\n              </th>\n              <th>\n                Email\n              </th>\n              <th>\n                Link\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            { setRows() }\n          </tbody>\n        </table>\n    </>\n  );\n};\n\nexport default Table;\n","import { connect } from 'react-redux';\nimport Table from './Table';\n\nconst mapStateToProps = (reducers) => {\n  return reducers.usersReducer;\n};\n\nconst TableConnect = connect(\n  mapStateToProps\n)(Table);\n\nexport default TableConnect;\n","import React from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/Error';\nimport Table from '../Table';\n\nclass Users extends React.Component {\n\n  componentDidMount() {\n    if(!this.props.users.length){\n      this.props.getAll();\n    }\n  }\n\n  setContent = () => {\n    return (\n      this.props.error ?\n        <Error message={this.props.error} /> :\n        this.props.loading ? <Spinner /> : <Table />\n    );\n  }\n\n  render () {\n    return (\n      <div>\n        <h1>Users</h1>\n        { this.setContent() }\n      </div>\n    );\n  }\n}\n\nexport default Users;\n","import { connect } from 'react-redux';\nimport * as usersActions from '../../actions/users/usersActions';\nimport Users from './Users';\n\nconst mapStateToProps = (reducers) => {\n  return reducers.usersReducer;\n};\n\nconst UsersConnect = connect(\n  mapStateToProps,\n  usersActions\n)(Users);\n\nexport default UsersConnect;\n","import React from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/Error';\n\nconst Comments = (props) => {\n  const setComments = () => (\n    props.comments.map(comment => (\n      <li key={comment.id}>\n        <b>\n          <u>\n            { comment.email }\n          </u>\n        </b>\n        <br/>\n        { comment.body }\n      </li>\n    ))\n  );\n\n  return (\n    props.errorComments ? <Error  message={props.errorComments}/> :\n      props.loadingComments && !props.comments.length ? <Spinner /> :\n        (\n          <div>\n            <ul className=\"comments\">\n              { setComments() }\n            </ul>\n          </div>\n        )\n  );\n}\n\nexport default Comments;","import { connect } from 'react-redux';\nimport Comments from './Comments';\n\nconst mapStateToProps = ({ postsReducer }) => postsReducer;\n\nconst CommentsConnect = connect(\n  mapStateToProps,\n  {}\n)(Comments);\n\nexport default CommentsConnect;\n","import React, { Component } from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/Error';\nimport Comments from '../Comments/index';\n\nclass Posts extends Component {\n\n  async componentDidMount() {\n    const {\n      getAllUsers,\n      getPostsByUser,\n      match: { params: { key } }\n    } = this.props;\n\n    if (!this.props.usersReducer.users.length){\n      await getAllUsers();\n    }\n    if (this.props.usersReducer.error){\n      return;\n    }\n    if (!('posts_key' in this.props.usersReducer.users[key])) {\n      getPostsByUser(key);\n    }\n  };\n\n  setUser = () => {\n    const {\n      usersReducer,\n      match: { params: { key } }\n    } = this.props;\n\n    const name = usersReducer.users.length ? usersReducer.users[key].name : null;\n\n    return (\n      usersReducer.error ?\n        <Error message={usersReducer.error} /> :\n        usersReducer.loading ? <Spinner /> :\n            (<h1 className=\"text-center\">Posts from { name }</h1>)\n    );\n  };\n\n  setPosts = () => {\n    const {\n      usersReducer: { users },\n      postsReducer,\n      postsReducer: { posts },\n      match: { params: { key } }\n    } = this.props;\n\n    return (\n      postsReducer.error ? <Error message={postsReducer.error}/> :\n        postsReducer.loading ? <Spinner /> :\n          posts.length && 'posts_key' in users[key] ? (\n            this.showInfo(posts[users[key].posts_key], users[key].posts_key)\n          ) : null\n    )\n  };\n\n  showInfo = (posts, post_key) => (\n    posts.map( (post, com_key) => (\n      <div\n        className=\"post_title\"\n        key={ post.id }\n        onClick={ () => this.showComments(post_key, com_key, post.comments) }\n      >\n        <h2>\n          { post.title }\n        </h2>\n        <p>\n          { post.body }\n        </p>\n        {\n          post.open ? <Comments comments={post.comments} /> : ''\n        }\n      </div>\n    ))\n  );\n\n  showComments = (post_key, com_key, comments) => {\n    this.props.openClose(post_key, com_key);\n    if (!comments.length) {\n      this.props.getComments(post_key, com_key);\n    }\n  };\n\n  render() {\n    return (\n      <>\n        { this.setUser() }\n        { this.setPosts() }\n      </>\n    );\n  }\n}\n\nexport default Posts;\n","\nexport const UPDATE = 'POSTS_UPDATE';\nexport const LOADING = 'POSTS_LOADING';\nexport const ERROR = 'POSTS_ERROR';\nexport const LOADING_COMMENTS = 'COMMENTS_LOADING';\nexport const ERROR_COMMENTS = 'COMMENTS_ERROR';\nexport const UPDATE_COMMENTS = 'UPDATE_COMMENTS';\n","import { connect } from 'react-redux';\nimport Posts from './Posts';\nimport * as usersActions from '../../actions/users/usersActions';\nimport * as postsActions from '../../actions/posts/postsActions';\n\nconst { getAll: getAllUsers } = usersActions;\nconst {\n  getByUser: getPostsByUser,\n  openClose,\n  getComments,\n} = postsActions;\n\nconst mapStateToProps = ({ usersReducer, postsReducer }) => {\n  return {\n    usersReducer,\n    postsReducer,\n  };\n};\n\nconst dispatchToProps = {\n  getAllUsers,\n  getPostsByUser,\n  openClose,\n  getComments,\n};\n\nconst PostsConnect = connect(\n  mapStateToProps,\n  dispatchToProps\n)(Posts);\n\nexport default PostsConnect;\n","import axios from 'axios';\nimport * as PostsTypes from '../posts/types';\nimport * as UsuariosTypes from '../users/types';\n\nexport const getByUser = (key) => async (dispatch, getState) => {\n    dispatch({\n        type: PostsTypes.LOADING\n    });\n\n    const { users } = getState().usersReducer;\n    const { posts } = getState().postsReducer;\n    const user_id = users[key].id;\n\n    try {\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${user_id}`);\n\n        const news = response.data.map((post) => ({\n            ...post,\n            comments: [],\n            open: false\n        }));\n\n        const updated_posts = [\n            ...posts,\n            news\n        ];\n\n        dispatch({\n            type: PostsTypes.UPDATE,\n            payload: updated_posts\n        });\n\n        const posts_key = updated_posts.length - 1;\n        const updated_users = [...users];\n        updated_users[key] = {\n            ...users[key],\n            posts_key,\n        };\n\n        dispatch({\n            type: UsuariosTypes.GET_ALL,\n            payload: updated_users\n        });\n\n    } catch (error) {\n        dispatch({\n            type: PostsTypes.ERROR,\n            payload: error.message + ' posts not available'\n        });\n    }\n}\n\nexport const openClose = (post_key, com_key) => (dispatch, getState) => {\n    const { posts } = getState().postsReducer;\n    const selected = posts[post_key][com_key];\n    const updated = {\n        ...selected,\n        open: !selected.open\n    }\n    posts[post_key][com_key] = updated;\n    try {\n        dispatch({\n            type: PostsTypes.UPDATE,\n            payload: posts\n        });\n    } catch (error) {\n        dispatch({\n            type: PostsTypes.ERROR,\n            payload: error.message\n        });\n    }\n}\n\nexport const getComments = (post_key, com_key) => async (dispatch, getState) => {\n    dispatch({\n        type: PostsTypes.LOADING_COMMENTS,\n    });\n    const { posts } = getState().postsReducer;\n    const selected = posts[post_key][com_key];\n    try {\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${selected.id}`);\n        const updated = {\n            ...selected,\n            comments: response.data\n        }\n        posts[post_key][com_key] = updated;\n        dispatch({\n            type: PostsTypes.UPDATE_COMMENTS,\n            payload: posts\n        });\n    } catch (error) {\n        dispatch({\n            type: PostsTypes.ERROR_COMMENTS,\n            payload: error.message + ' comments not available'\n        });\n    }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/Error';\n\nclass Tasks extends Component {\n\n  componentDidMount () {\n    if (!Object.keys(this.props.tasks).length) {\n      this.props.getAll();\n    }\n  }\n\n  componentDidUpdate () {\n    const {\n      tasks,\n      loading,\n      getAll\n    } = this.props;\n\n    if (!Object.keys(tasks).length && !loading) {\n      getAll();\n    }\n  }\n\n  showContent = () => {\n    const {\n      tasks,\n      loading,\n      error\n    } = this.props;\n\n    return (\n      loading ? <Spinner /> :\n        error ? <Error message={error} /> :\n          (\n            Object.keys(tasks).map(userId => (\n              <div key={userId}>\n                <h2>\n                  User {userId}\n                </h2>\n                <div className=\"tasks-container\">\n                  { this.setTasks(userId) }\n                </div>\n              </div>\n            ))\n          )\n    )\n  }\n\n  setTasks = (userId) => {\n    const { tasks, changeChekbox, deleteTask } = this.props;\n    const byUser = {\n      ...tasks[userId]\n    };\n\n    return Object.keys(byUser).map(taskId => (\n      <div className=\"grid\">\n        <div className=\"row task-row\" key={taskId}>\n          <div>\n            <input\n              type=\"checkbox\"\n              defaultChecked={byUser[taskId].completed}\n              onChange={ () => changeChekbox(userId, taskId) }\n            />\n          </div>\n          <div className=\"col-6\">\n            {\n              byUser[taskId].title\n            }\n          </div>\n          <div className=\"col-1\">\n            <Link to={`/react-redux-blog/tasks/save/${userId}/${taskId}`}>\n              <div className=\"edit-solid icon\" title=\"Edit\"></div>\n            </Link>\n          </div>\n          <div className=\"col-1\">\n            <div\n                className=\"trash-solid icon m_left\"\n                onClick={ () => deleteTask(taskId) }\n                title=\"Delete\"\n              >\n              </div>\n          </div>\n        </div>\n      </div>\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"flex-column\">\n        <Link to='/react-redux-blog/tasks/save'>\n          <div class=\"card-solid icon\" title=\"Add\"></div>\n        </Link>\n        { this.showContent() }\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n","import React, { Component } from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/Error';\nimport { Redirect } from 'react-router-dom';\n\nclass Save extends Component {\n\n  componentDidMount = () => {\n    const {\n      match: { params: { userId, taskId } },\n      tasks,\n      changeUserId,\n      changeTitle,\n      cleanForm\n    } =  this.props;\n\n    if (userId && taskId) {\n      const task = tasks[userId][taskId];\n      changeUserId(userId);\n      changeTitle(task.title);\n    } else {\n      cleanForm();\n    }\n  };\n\n  changeUserId = (event) => {\n    this.props.changeUserId(event.target.value);\n  };\n\n  changeTitle = (event) => {\n    this.props.changeTitle(event.target.value);\n  };\n\n  save = () => {\n    const {\n      match: { params: { userId, taskId } },\n      tasks,\n      title,\n      saveTask,\n      editTask\n    } = this.props;\n\n    const newTask = {\n      userId: userId,\n      title: title,\n      completed: false\n    };\n\n    if (userId && taskId) {\n      const task = tasks[userId][taskId];\n      const editedTask = {\n        ...newTask,\n        completed: task.completed,\n        id: taskId\n      };\n      editTask(editedTask);\n    }\n    else {\n      saveTask(newTask);\n    }\n  }\n\n  disable = () => {\n    const {\n      userId,\n      title,\n      loading\n    } = this.props;\n\n    return (\n      loading ? true :\n        !userId || !title ? true :\n          false\n    );\n  };\n\n  showAction = () => {\n    const { error, loading } = this.props;\n    return (\n      loading ? <Spinner /> :\n        error ? <Error message={error} /> :\n          null\n    );\n  };\n\n  render() {\n    const { goBack } = this.props;\n    return (\n      <div className=\"save-tasks\">\n        {\n          goBack ? <Redirect to=\"/react-redux-blog/tasks\" /> : null\n        }\n        <h1>\n          Save Task\n        </h1>\n        User id:\n        <input\n          type=\"number\"\n          value={ this.props.userId }\n          onChange={ this.changeUserId }\n        />\n        <br/>\n        <br/>\n        Title:\n        <input\n          type=\"text\"\n          value={ this.props.title }\n          onChange={ this.changeTitle }\n        />\n        <br/>\n        <br/>\n        {\n          !this.disable() && (\n            <div\n              class=\"tv-solid icon\"\n              onClick={ this.save }\n              disabled={ this.disable() }\n              title=\"Save\"\n            ></div>\n          )\n        }\n        { this.showAction() }\n      </div>\n    );\n  }\n}\n\nexport default Save;\n","import axios from 'axios';\nimport * as ActionType from '../tasks/types';\n\nexport const getAll = () => async (dispatch) => {\n    dispatch({\n        type: ActionType.LOADING\n    });\n    try {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/todos');\n\n        const tasks = {};\n        response.data.map(task => (\n            tasks[task.userId] = {\n                ...tasks[task.userId],\n                [task.id]: {\n                    ...task\n                }\n            }\n        ));\n\n        dispatch({\n            type: ActionType.GET_ALL,\n            payload: tasks\n        });\n    } catch (error) {\n        dispatch({\n            type: ActionType.ERROR,\n            payload: error.message + ' - Tasks info not available'\n        });\n    }\n}\n\nexport const changeUserId = (userId) => (dispatch) => {\n    dispatch({\n        type: ActionType.CHANGE_USER_ID,\n        payload: userId\n    });\n}\n\nexport const changeTitle = (title) => (dispatch) => {\n    dispatch({\n        type: ActionType.CHANGE_TITLE,\n        payload: title\n    });\n}\n\nexport const saveTask = (newTask) => async (dispatch) => {\n    dispatch({\n        type: ActionType.LOADING\n    });\n\n    try {\n        await axios.post('https://jsonplaceholder.typicode.com/todos', newTask);\n        dispatch({\n            type: ActionType.TASK_SAVED\n        });\n\n\n    } catch (error) {\n        dispatch({\n            type: ActionType.ERROR,\n            payload: error.message + ' - Save Task Fail, please try later'\n        });\n    }\n}\n\nexport const editTask = (editedTask) => async (dispatch) => {\n    dispatch({\n        type: ActionType.LOADING\n    });\n\n    try {\n        await axios.put(`https://jsonplaceholder.typicode.com/todos/${editedTask.id}`, editedTask);\n        dispatch({\n            type: ActionType.TASK_SAVED\n        });\n\n\n    } catch (error) {\n        dispatch({\n            type: ActionType.ERROR,\n            payload: error.message + ' - Save Task Fail, please try later'\n        });\n    }\n}\n\nexport const changeChekbox = (userId, taskId) => (dispatch, getState) => {\n    const { tasks } = getState().tasksReducer;\n    const selected = tasks[userId][taskId];\n\n    const updatedTasks = {\n        ...tasks\n    };\n    updatedTasks[userId] = {\n        ...tasks[userId]\n    };\n    updatedTasks[userId][taskId] = {\n        ...tasks[userId][taskId],\n        completed: !selected.completed\n    };\n\n    dispatch({\n        type: ActionType.UPDATE,\n        payload: updatedTasks\n    });\n}\n\nexport const deleteTask = (taskId) => async (dispatch) => {\n    dispatch({\n        type: ActionType.LOADING\n    });\n\n    try {\n        await axios.delete(`https://jsonplaceholder.typicode.com/todos/${taskId}`);\n        dispatch({\n            type: ActionType.GET_ALL,\n            payload: {}\n        });\n    } catch (error) {\n        dispatch({\n            type: ActionType.ERROR,\n            payload: error.message + ' - Delete Task Fail, please try later'\n        });\n    }\n}\n\nexport const cleanForm = () => (dispatch) => {\n    dispatch({\n        type: ActionType.CLEAN\n    });\n}\n","export const GET_ALL = 'TASKS_GET_ALL';\nexport const LOADING = 'TASKS_LOADING';\nexport const ERROR = 'TASKS_ERROR';\nexport const CHANGE_USER_ID = 'CHANGE_USER_ID';\nexport const CHANGE_TITLE = 'CHANGE_TITLE';\nexport const TASK_SAVED = 'TASK_SAVED';\nexport const UPDATE = 'UPDATE';\nexport const CLEAN = 'CLEAN';\n","import { connect } from 'react-redux';\nimport Tasks from './Tasks';\nimport Save from './Save';\nimport * as tasksActions from '../../actions/tasks/tasksAction';\n\nconst mapStateToProps = ({ tasksReducer }) => tasksReducer;\n\nexport const TasksConnect = connect(\n  mapStateToProps,\n  tasksActions\n)(Tasks);\n\nexport const SaveConnect = connect(\n  mapStateToProps,\n  tasksActions\n)(Save);\n\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Menu from './Menu/Menu';\nimport Users from './Users';\nimport Posts from './Posts';\nimport { TasksConnect, SaveConnect } from './Tasks';\n\nconst App = () => (\n  <BrowserRouter>\n    <Menu />\n    <div className=\"margin\">\n      <Route exact path='/' component={ Users } />\n      <Route exact path='/react-redux-blog' component={ Users } />\n      <Route exact path='/react-redux-blog/users' component={ Users } />\n      <Route exact path='/react-redux-blog/tasks' component={ TasksConnect } />\n      <Route exact path='/react-redux-blog/posts/:key' component={ Posts } />\n      <Route exact path='/react-redux-blog/tasks/save' component={ SaveConnect } />\n      <Route exact path='/react-redux-blog/tasks/save/:userId/:taskId' component={ SaveConnect } />\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","import * as ActionType from '../actions/users/types';\n\nconst INITIAL_STATE = {\n    users: [],\n    loading: false,\n    error: ''\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n\n        case ActionType.GET_ALL:\n            return {...state, users: action.payload, loading: false, error: ''};\n\n        case ActionType.LOADING:\n            return {...state, loading: true};\n\n        case ActionType.ERROR:\n            return {...state, error: action.payload, loading: false};\n\n        default: return state;\n    }\n}\n","import * as ActionType from '../actions/posts/types';\n\nconst INITIAL_STATE = {\n    posts: [],\n    loading: false,\n    error: '',\n    loadingComments: false,\n    errorComments: '',\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ActionType.UPDATE:\n            return {\n                ...state,\n                posts: action.payload,\n                loading: false,\n                error: ''\n            };\n\n        case ActionType.ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n\n        case ActionType.LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case ActionType.ERROR_COMMENTS:\n            return {\n                ...state,\n                errorComments: action.payload,\n                loadingComments: false\n            };\n\n        case ActionType.LOADING_COMMENTS:\n            return {\n                ...state,\n                loadingComments: true\n            };\n\n        case ActionType.UPDATE_COMMENTS:\n            return {\n                ...state,\n                posts: action.payload,\n                loadingComments: false,\n                errorComments: ''\n            };\n\n        default: return state;\n    }\n}\n","import * as ActionType from '../actions/tasks/types';\n\nconst INITIAL_STATE = {\n    tasks: {},\n    loading: false,\n    error: '',\n    userId: '',\n    title: '',\n    goBack: false,\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n\n        case ActionType.GET_ALL:\n            return {\n                ...state,\n                tasks: action.payload,\n                loading: false,\n                error: '',\n                goBack: false\n            };\n\n        case ActionType.LOADING:\n            return {...state, loading: true};\n\n        case ActionType.ERROR:\n            return {...state, error: action.payload, loading: false};\n\n        case ActionType.CHANGE_USER_ID:\n            return {...state, userId: action.payload};\n\n        case ActionType.CHANGE_TITLE:\n            return {...state, title: action.payload};\n\n        case ActionType.TASK_SAVED:\n            return {\n                ...state,\n                loading: false,\n                tasks: {},\n                error: '',\n                goBack: true,\n                userId: '',\n                title: ''\n            };\n\n        case ActionType.UPDATE:\n            return {...state, tasks: action.payload};\n\n        case ActionType.CLEAN:\n            return {...state, userId: '', title: ''};\n\n        default: return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport usersReducer from './usersReducer';\nimport postsReducer from './postsReducer';\nimport tasksReducer from './tasksReducers';\n\nexport default combineReducers({\n    usersReducer,\n    postsReducer,\n    tasksReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/icons.css';\nimport './css/grid.css'\nimport App from './components/App';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\n\nimport reducers from './reducers';\n\nconst store = createStore(\n    reducers, // Reducers\n    {},  // Initial State\n    applyMiddleware(reduxThunk)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}