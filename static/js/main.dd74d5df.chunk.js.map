{"version":3,"sources":["components/Menu/Menu.js","actions/users/types.js","actions/users/usersActions.js","components/Spinner/Spinner.js","components/Error/Error.js","components/Table/Table.js","components/Table/index.js","components/Users/Users.js","components/Users/index.js","components/Posts/Posts.js","components/Posts/index.js","actions/posts/postsActions.js","actions/posts/types.js","components/App.js","reducers/usersReducer.js","reducers/postsReducer.js","reducers/index.js","index.js"],"names":["Menu","id","to","GET_ALL","ERROR","getAll","dispatch","a","type","axios","get","response","ActionType","payload","data","message","Spinner","className","Error","props","Table","users","map","user","key","name","email","website","TableConnect","connect","reducers","usersReducer","Users","setContent","error","loading","this","length","React","Component","UsersConnect","usersActions","Posts","setUser","match","params","setPosts","postsReducer","posts","posts_key","post","onClick","alert","title","body","getAllUsers","getPostsByUser","console","log","dispatchToProps","getState","user_id","updated_posts","updated_users","UsuariosTypes","PostsConnect","Tasks","App","exact","path","component","INITIAL_STATE","combineReducers","state","action","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd74d5df.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst Menu = () => (\n    <nav id=\"menu\">\n        <Link to=\"/react-redux-blog/users\">Users</Link>\n        <Link to=\"/react-redux-blog/tasks\">Tasks</Link>\n    </nav>\n);\n\nexport default Menu;\n","export const GET_ALL = 'USERS_GET_ALL';\nexport const LOADING = 'USERS_LOADING';\nexport const ERROR = 'USERS_ERROR';\n","import axios from 'axios';\nimport * as ActionType from '../users/types';\n\nexport const getAll = () => async (dispatch) => {\n    dispatch({\n        type: ActionType.LOADING\n    });\n    try {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users');\n        dispatch({\n            type: ActionType.GET_ALL,\n            payload: response.data\n        });\n    } catch (error) {\n        dispatch({\n            type: ActionType.ERROR,\n            payload: error.message + ' - User info not available'\n        });\n    }\n}\n","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner-container\">\n      <div className=\"lds-spinner\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\n\nconst Error = (props) => {\n  return (\n    <div className=\"text-center\">\n      <h2 className=\"red\">\n        Something went wrong, please try later.\n      </h2>\n      {props.message}\n    </div>\n  );\n};\n\nexport default Error;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Table = (props) => {\n\n  const setRows = () => (\n    props.users.map((user, key) => (\n      <tr key={ user.id }>\n        <td>\n          { user.name }\n        </td>\n        <td>\n          { user.email }\n        </td>\n        <td>\n          { user.website }\n        </td>\n        <td>\n          <Link to={ `/react-redux-blog/posts/${key}` }>\n            <div className=\"eye-solid icon\"></div>\n          </Link>\n        </td>\n      </tr>\n    ))\n  );\n\n  return (\n    <>\n      <table className=\"table\">\n          <thead>\n            <tr>\n              <th>\n                Name\n              </th>\n              <th>\n                Email\n              </th>\n              <th>\n                Link\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            { setRows() }\n          </tbody>\n        </table>\n    </>\n  );\n};\n\nexport default Table;\n","import { connect } from 'react-redux';\nimport Table from './Table';\n\nconst mapStateToProps = (reducers) => {\n  return reducers.usersReducer;\n};\n\nconst TableConnect = connect(\n  mapStateToProps\n)(Table);\n\nexport default TableConnect;\n","import React from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/Error';\nimport Table from '../Table';\n\nclass Users extends React.Component {\n\n  componentDidMount() {\n    if(!this.props.users.length){\n      this.props.getAll();\n    }\n  }\n\n  setContent = () => {\n    return (\n      this.props.error ?\n        <Error message={this.props.error} /> :\n        this.props.loading ? <Spinner /> : <Table />\n    );\n  }\n\n  render () {\n    return (\n      <div>\n        <h1>Users</h1>\n        { this.setContent() }\n      </div>\n    );\n  }\n}\n\nexport default Users;\n","import { connect } from 'react-redux';\nimport * as usersActions from '../../actions/users/usersActions';\nimport Users from './Users';\n\nconst mapStateToProps = (reducers) => {\n  return reducers.usersReducer;\n};\n\nconst UsersConnect = connect(\n  mapStateToProps,\n  usersActions\n)(Users);\n\nexport default UsersConnect;\n","import React, { Component } from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/Error';\nimport { useReducer } from 'react';\n\nclass Posts extends Component {\n\n  async componentDidMount() {\n    const {\n      getAllUsers,\n      getPostsByUser,\n      match: { params: { key } }\n    } = this.props;\n\n    if (!this.props.usersReducer.users.length){\n      await getAllUsers();\n    }\n    if (this.props.usersReducer.error){\n      return;\n    }\n    if (!('posts_key' in this.props.usersReducer.users[key])) {\n      getPostsByUser(key);\n    }\n  };\n\n  setUser = () => {\n    const {\n      usersReducer,\n      match: { params: { key } }\n    } = this.props;\n\n    const name = usersReducer.users.length ? usersReducer.users[key].name : null;\n\n    return (\n      usersReducer.error ?\n        <Error message={usersReducer.error} /> :\n        usersReducer.loading ? <Spinner /> :\n            (<h1 className=\"text-center\">Posts from { name }</h1>)\n    );\n  };\n\n  setPosts = () => {\n    const {\n      usersReducer: { users },\n      postsReducer,\n      postsReducer: { posts },\n      match: { params: { key } }\n    } = this.props;\n\n    return (\n      postsReducer.error ? <Error message={postsReducer.error}/> :\n        postsReducer.loading ? <Spinner /> :\n          posts.length && 'posts_key' in users[key] ? (\n            posts[users[key].posts_key].map( post => (\n              <div\n                className=\"post_title\"\n                key={ post.id }\n                onClick={ () => alert(post.id) }\n              >\n                <h2>\n                  { post.title }\n                </h2>\n                <p>\n                  { post.body }\n                </p>\n              </div>\n            ))\n          ) : null\n    )\n  }\n\n  render() {\n    console.log(this.props);\n    return (\n      <>\n        { this.setUser() }\n        { this.setPosts() }\n      </>\n    );\n  }\n}\n\nexport default Posts;\n","import { connect } from 'react-redux';\nimport Posts from './Posts';\nimport * as usersActions from '../../actions/users/usersActions';\nimport * as postsActions from '../../actions/posts/postsActions';\n\nconst { getAll: getAllUsers } = usersActions;\nconst { getByUser: getPostsByUser } = postsActions;\n\nconst mapStateToProps = ({ usersReducer, postsReducer }) => {\n  return {\n    usersReducer,\n    postsReducer,\n  };\n};\n\nconst dispatchToProps = {\n  getAllUsers,\n  getPostsByUser,\n};\n\nconst PostsConnect = connect(\n  mapStateToProps,\n  dispatchToProps\n)(Posts);\n\nexport default PostsConnect;\n","import axios from 'axios';\nimport * as ActionType from '../posts/types';\nimport * as UsuariosTypes from '../users/types';\n\nexport const getByUser = (key) => async (dispatch, getState) => {\n    dispatch({\n        type: ActionType.LOADING\n    });\n\n    const { users } = getState().usersReducer;\n    const { posts } = getState().postsReducer;\n    const user_id = users[key].id;\n\n    try {\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${user_id}`);\n\n        const updated_posts = [\n            ...posts,\n            response.data\n        ];\n\n        dispatch({\n            type: ActionType.GET_BY_USER,\n            payload: updated_posts\n        });\n\n        const posts_key = updated_posts.length - 1;\n        const updated_users = [...users];\n        updated_users[key] = {\n            ...users[key],\n            posts_key,\n        };\n\n        dispatch({\n            type: UsuariosTypes.GET_ALL,\n            payload: updated_users\n        });\n\n    } catch (error) {\n        dispatch({\n            type: ActionType.ERROR,\n            payload: error.message + ' posts not available'\n        });\n    }\n}\n","\nexport const GET_BY_USER = 'POSTS_GET_BY_USER';\nexport const LOADING = 'POSTS_LOADING';\nexport const ERROR = 'POSTS_ERROR';\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Menu from './Menu/Menu';\nimport Users from './Users';\nimport Posts from './Posts';\n\nconst Tasks = () => <div>Tasks</div>;\n\nconst App = () => (\n  <BrowserRouter>\n    <Menu />\n    <div className=\"margin\">\n      <Route exact path='/' component={ Users } />\n      <Route exact path='/react-redux-blog' component={ Users } />\n      <Route exact path='/react-redux-blog/users' component={ Users } />\n      <Route exact path='/react-redux-blog/tasks' component={ Tasks } />\n      <Route exact path='/react-redux-blog/posts/:key' component={ Posts } />\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","import * as ActionType from '../actions/users/types';\n\nconst INITIAL_STATE = {\n    users: [],\n    loading: false,\n    error: ''\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n\n        case ActionType.GET_ALL:\n            return {...state, users: action.payload, loading: false, error: ''};\n\n        case ActionType.LOADING:\n            return {...state, loading: true};\n\n        case ActionType.ERROR:\n            return {...state, error: action.payload, loading: false};\n\n        default: return state;\n    }\n}\n","import * as ActionType from '../actions/posts/types';\n\nconst INITIAL_STATE = {\n    posts: [],\n    loading: false,\n    error: ''\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ActionType.GET_BY_USER:\n            return {\n                ...state,\n                posts: action.payload,\n                loading: false,\n                error: ''\n            };\n\n        case ActionType.ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n\n        default: return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport usersReducer from './usersReducer';\nimport postsReducer from './postsReducer';\n\nexport default combineReducers({\n    usersReducer,\n    postsReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/icons.css';\nimport App from './components/App';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\n\nimport reducers from './reducers';\n\nconst store = createStore(\n    reducers, // Reducers\n    {},  // Initial State\n    applyMiddleware(reduxThunk)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}