{"version":3,"sources":["components/Menu/Menu.js","actions/users/usersActions.js","actions/users/types.js","components/Spinner/Spinner.js","components/Users/Users.js","components/Users/index.js","components/App.js","reducers/usersReducer.js","reducers/index.js","index.js"],"names":["Menu","id","to","getAll","dispatch","a","type","axios","get","response","payload","data","message","Spinner","className","Users","setRows","props","users","map","user","key","name","email","website","setContent","loading","this","React","Component","UsersConnect","connect","reducers","usersReducer","usersActions","Tasks","App","exact","path","component","INITIAL_STATE","error","combineReducers","state","action","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"yTAUeA,EAPF,kBACT,yBAAKC,GAAG,QACJ,kBAAC,IAAD,CAAMC,GAAG,2BAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,2BAAT,W,kDCHKC,EAAS,yDAAM,WAAOC,GAAP,eAAAC,EAAA,6DACxBD,EAAS,CACLE,KCJe,YDEK,kBAKGC,IAAMC,IAAI,8CALb,OAKdC,EALc,OAMpBL,EAAS,CACLE,KCViB,gBDWjBI,QAASD,EAASE,OARF,gDAWpBP,EAAS,CACLE,KCbS,QDcTI,QAAS,KAAME,UAbC,yDAAN,uD,wCEqBPC,G,MArBC,WACd,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,eACb,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,kCCyCOC,E,2MAlDbC,QAAU,kBACR,EAAKC,MAAMC,MAAMC,KAAI,SAACC,GAAD,OACnB,wBAAIC,IAAMD,EAAKnB,IACb,4BACImB,EAAKE,MAET,4BACIF,EAAKG,OAET,4BACIH,EAAKI,c,EAMfC,WAAa,WACX,OAAO,EAAKR,MAAMS,QAChB,kBAAC,EAAD,MAEE,2BAAOZ,UAAU,SACf,+BACE,4BACE,oCAGA,qCAGA,sCAKJ,+BACI,EAAKE,a,mFAtCfW,KAAKV,MAAMd,W,+BA6CX,OACE,6BACIwB,KAAKF,kB,GAlDKG,IAAMC,WCUXC,EALMC,aAJG,SAACC,GACvB,OAAOA,EAASC,eAKhBC,EAFmBH,CAGnBhB,GCNIoB,EAAQ,kBAAM,uCAcLC,EAZH,kBACV,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKtB,UAAU,UACb,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAYxB,IAClC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,oBAAoBC,UAAYxB,IAClD,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,0BAA0BC,UAAYxB,IACxD,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,0BAA0BC,UAAYJ,O,wBCZxDK,EAAgB,CAClBtB,MAAO,GACPQ,SAAS,EACTe,MAAO,ICFIC,cAAgB,CAC3BT,aDIW,WAAoC,IAAnCU,EAAkC,uDAA1BH,EAAeI,EAAW,uCAC9C,OAAQA,EAAOtC,MAEX,ILXqB,gBKYjB,OAAO,eAAIqC,EAAX,CAAkBzB,MAAO0B,EAAOlC,QAASgB,SAAS,IAEtD,ILbe,UKcX,OAAO,eAAIiB,EAAX,CAAkBjB,SAAS,IAE/B,ILfa,QKgBT,OAAO,eAAIiB,EAAX,CAAkBF,MAAOG,EAAOlC,QAASgB,SAAS,IAEtD,QAAS,OAAOiB,METlBE,EAAQC,YACVd,EACA,GACAe,YAAgBC,MAGpBC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEJM,SAASC,eAAe,W","file":"static/js/main.85699bab.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst Menu = () => (\n    <nav id=\"menu\">\n        <Link to=\"/react-redux-blog/users\">Users</Link>\n        <Link to=\"/react-redux-blog/tasks\">Tasks</Link>\n    </nav>\n);\n\nexport default Menu;\n","import axios from 'axios';\nimport * as ActionType from './types';\n\nexport const getAll = () => async (dispatch) => {\n    dispatch({\n        type: ActionType.LOADING\n    });\n    try {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users');\n        dispatch({\n            type: ActionType.GET_ALL_USERS,\n            payload: response.data\n        });\n    } catch (error) {\n        dispatch({\n            type: ActionType.ERROR,\n            payload: error.message\n        });\n    }\n}\n","export const GET_ALL_USERS = 'GET_ALL_USERS';\nexport const LOADING = 'LOADING';\nexport const ERROR = 'ERROR';\n","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner-container\">\n      <div className=\"lds-spinner\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\nimport Spinner from '../Spinner/Spinner';\n\nclass Users extends React.Component {\n\n  componentDidMount() {\n    this.props.getAll();\n  }\n\n  setRows = () => (\n    this.props.users.map((user) => (\n      <tr key={ user.id }>\n        <td>\n          { user.name }\n        </td>\n        <td>\n          { user.email }\n        </td>\n        <td>\n          { user.website }\n        </td>\n      </tr>\n    ))\n  );\n\n  setContent = () => {\n    return this.props.loading ?\n      <Spinner />:\n      (\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>\n                Name\n              </th>\n              <th>\n                Email\n              </th>\n              <th>\n                Link\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            { this.setRows() }\n          </tbody>\n        </table>\n      );\n  }\n\n  render () {\n    return (\n      <div>\n        { this.setContent() }\n      </div>\n    );\n  }\n}\n\nexport default Users;\n","import { connect } from 'react-redux';\nimport * as usersActions from '../../actions/users/usersActions';\nimport Users from './Users';\n\nconst mapStateToProps = (reducers) => {\n  return reducers.usersReducer;\n};\n\nconst UsersConnect = connect(\n  mapStateToProps,\n  usersActions\n)(Users);\n\nexport default UsersConnect;\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Menu from './Menu/Menu';\nimport Users from './Users';\n\nconst Tasks = () => <div>Tasks</div>;\n\nconst App = () => (\n  <BrowserRouter>\n    <Menu />\n    <div className=\"margin\">\n      <Route exact path='/' component={ Users } />\n      <Route exact path='/react-redux-blog' component={ Users } />\n      <Route exact path='/react-redux-blog/users' component={ Users } />\n      <Route exact path='/react-redux-blog/tasks' component={ Tasks } />\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","import * as ActionType from '../actions/users/types';\n\nconst INITIAL_STATE = {\n    users: [],\n    loading: false,\n    error: ''\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n\n        case ActionType.GET_ALL_USERS:\n            return {...state, users: action.payload, loading: false};\n\n        case ActionType.LOADING:\n            return {...state, loading: true};\n\n        case ActionType.ERROR:\n            return {...state, error: action.payload, loading: false};\n\n        default: return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n    usersReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\n\nimport reducers from './reducers';\n\nconst store = createStore(\n    reducers, // Reducers\n    {},  // Initial State\n    applyMiddleware(reduxThunk)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}